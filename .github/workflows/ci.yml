name: Water Classroom CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'

env:
  REGISTRY: ghcr.io
  ORGANIZATION: stellariumfoundation
  FRONTEND_NODE_VERSION: 18
  GO_VERSION: 1.22
  HELM_VERSION: 3.12.0

jobs:
  backend-checks:
    name: Backend Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          golangci-lint --version
      
      - name: Run linter
        run: |
          cd backend
          for svc in */; do
            if [ -f "${svc}go.mod" ]; then
              echo "Linting ${svc}"
              cd ${svc} && golangci-lint run ./... && cd ..
            fi
          done
      
      - name: Run tests
        run: |
          cd backend
          for svc in */; do
            if [ -f "${svc}go.mod" ]; then
              echo "Testing ${svc}"
              cd ${svc} && go test ./... -v && cd ..
            fi
          done
      
      - name: Build services
        run: |
          cd backend
          for svc in */; do
            if [ -f "${svc}go.mod" ]; then
              echo "Building ${svc}"
              cd ${svc} && go build -o bin/${svc%/} ./cmd && cd ..
            fi
          done

  build-containers:
    name: Build and Push Containers
    runs-on: ubuntu-latest
    needs: [backend-checks]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [auth-svc, user-svc, curriculum-svc, progress-svc, assessment-svc, tutor-orchestrator-svc, notification-svc, api-gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6
            network=host
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/wc-${{ matrix.service }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      
      - name: Build and push
        if: ${{ hashFiles(format('backend/{0}/Dockerfile', matrix.service)) != '' }}
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service }}
          file: ./backend/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-containers
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
          context: staging
      
      - name: Update Helm values with new image tags
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          cd backend/deployments/helm/umbrella
          
          # Update image tags in values-staging.yaml
          sed -i "s/tag: .*/tag: $SHORT_SHA/g" values-staging.yaml
      
      - name: Deploy with Helm
        run: |
          cd backend/deployments/helm/umbrella
          helm upgrade --install water-classroom . \
            -f values-staging.yaml \
            --namespace water-classroom \
            --create-namespace \
            --timeout 5m \
            --wait
      
      - name: Verify deployment
        run: |
          kubectl get pods -n water-classroom
          kubectl get svc -n water-classroom

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ needs.deploy-staging.result == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Water Classroom Deployment
          SLACK_MESSAGE: |
            Deployment to staging ${{ needs.deploy-staging.result == 'success' && 'succeeded' || 'failed' }}
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
            SHA: ${{ github.sha }}
